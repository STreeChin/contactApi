// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/config/config.go

// Package mocks is a generated GoMock package.
package mocks

import (
	config "github.com/STreeChin/contactapi/pkg/config"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfig is a mock of Config interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetCacheConfig mocks base method
func (m *MockConfig) GetCacheConfig() *config.CacheConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheConfig")
	ret0, _ := ret[0].(*config.CacheConfig)
	return ret0
}

// GetCacheConfig indicates an expected call of GetCacheConfig
func (mr *MockConfigMockRecorder) GetCacheConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheConfig", reflect.TypeOf((*MockConfig)(nil).GetCacheConfig))
}

// GetDBConfig mocks base method
func (m *MockConfig) GetDBConfig() *config.DatabaseConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBConfig")
	ret0, _ := ret[0].(*config.DatabaseConfig)
	return ret0
}

// GetDBConfig indicates an expected call of GetDBConfig
func (mr *MockConfigMockRecorder) GetDBConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBConfig", reflect.TypeOf((*MockConfig)(nil).GetDBConfig))
}
