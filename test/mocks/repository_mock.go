// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
	reflect "reflect"
)

// MockDBHandler is a mock of DBHandler interface
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// FindOne mocks base method
func (m *MockDBHandler) FindOne(db, coll, key string, value interface{}) (bson.M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", db, coll, key, value)
	ret0, _ := ret[0].(bson.M)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockDBHandlerMockRecorder) FindOne(db, coll, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockDBHandler)(nil).FindOne), db, coll, key, value)
}

// InsertOne mocks base method
func (m *MockDBHandler) InsertOne(db, coll string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", db, coll, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne
func (mr *MockDBHandlerMockRecorder) InsertOne(db, coll, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockDBHandler)(nil).InsertOne), db, coll, value)
}

// UpdateOne mocks base method
func (m *MockDBHandler) UpdateOne(db, coll, key string, value, update interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", db, coll, key, value, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne
func (mr *MockDBHandlerMockRecorder) UpdateOne(db, coll, key, value, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockDBHandler)(nil).UpdateOne), db, coll, key, value, update)
}

// DeleteOne mocks base method
func (m *MockDBHandler) DeleteOne(db, coll, key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", db, coll, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne
func (mr *MockDBHandlerMockRecorder) DeleteOne(db, coll, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockDBHandler)(nil).DeleteOne), db, coll, key, value)
}
