// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/contact.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "github.com/STreeChin/contactapi/pkg/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetOneContact mocks base method
func (m *MockRepository) GetOneContact(key, value string) (*entities.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneContact", key, value)
	ret0, _ := ret[0].(*entities.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneContact indicates an expected call of GetOneContact
func (mr *MockRepositoryMockRecorder) GetOneContact(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneContact", reflect.TypeOf((*MockRepository)(nil).GetOneContact), key, value)
}

// InsertOneContact mocks base method
func (m *MockRepository) InsertOneContact(contact *entities.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneContact", contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOneContact indicates an expected call of InsertOneContact
func (mr *MockRepositoryMockRecorder) InsertOneContact(contact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneContact", reflect.TypeOf((*MockRepository)(nil).InsertOneContact), contact)
}

// UpdateOneContact mocks base method
func (m *MockRepository) UpdateOneContact(contact *entities.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneContact", contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOneContact indicates an expected call of UpdateOneContact
func (mr *MockRepositoryMockRecorder) UpdateOneContact(contact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneContact", reflect.TypeOf((*MockRepository)(nil).UpdateOneContact), contact)
}

// GetContactIDByAPIKey mocks base method
func (m *MockRepository) GetContactIDByAPIKey(apiKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactIDByAPIKey", apiKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactIDByAPIKey indicates an expected call of GetContactIDByAPIKey
func (mr *MockRepositoryMockRecorder) GetContactIDByAPIKey(apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactIDByAPIKey", reflect.TypeOf((*MockRepository)(nil).GetContactIDByAPIKey), apiKey)
}

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetEmailByContactID mocks base method
func (m *MockCache) GetEmailByContactID(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailByContactID", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailByContactID indicates an expected call of GetEmailByContactID
func (mr *MockCacheMockRecorder) GetEmailByContactID(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailByContactID", reflect.TypeOf((*MockCache)(nil).GetEmailByContactID), key)
}

// SetEmailByContactID mocks base method
func (m *MockCache) SetEmailByContactID(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEmailByContactID", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEmailByContactID indicates an expected call of SetEmailByContactID
func (mr *MockCacheMockRecorder) SetEmailByContactID(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEmailByContactID", reflect.TypeOf((*MockCache)(nil).SetEmailByContactID), key, value)
}

// GetOneContact mocks base method
func (m *MockCache) GetOneContact(value string) (*entities.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneContact", value)
	ret0, _ := ret[0].(*entities.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneContact indicates an expected call of GetOneContact
func (mr *MockCacheMockRecorder) GetOneContact(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneContact", reflect.TypeOf((*MockCache)(nil).GetOneContact), value)
}

// SetOneContact mocks base method
func (m *MockCache) SetOneContact(value string, contact *entities.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOneContact", value, contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOneContact indicates an expected call of SetOneContact
func (mr *MockCacheMockRecorder) SetOneContact(value, contact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOneContact", reflect.TypeOf((*MockCache)(nil).SetOneContact), value, contact)
}

// DelOneContact mocks base method
func (m *MockCache) DelOneContact(value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelOneContact", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelOneContact indicates an expected call of DelOneContact
func (mr *MockCacheMockRecorder) DelOneContact(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelOneContact", reflect.TypeOf((*MockCache)(nil).DelOneContact), value)
}
